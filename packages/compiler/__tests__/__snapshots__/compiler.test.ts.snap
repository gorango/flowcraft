// Vitest Snapshot v1, https://vitest.dev/guide/snapshot.html

exports[`Compiler > should compile all test fixtures 1`] = `
{
  "complexControlFlow": {
    "edges": [
      {
        "source": "merge_1",
        "target": "loop-controller_1",
      },
      {
        "source": "loop-controller_1",
        "target": "merge_2",
      },
      {
        "source": "loop-controller_1",
        "target": "merge_2",
      },
      {
        "action": "continue",
        "source": "loop-controller_1",
        "target": "loop-controller_1",
      },
      {
        "source": "merge_2",
        "target": "loop-controller_1",
      },
      {
        "condition": "processedCount > 1000",
        "source": "gather_1",
        "target": "gather_1",
      },
      {
        "source": "gather_1",
        "target": "merge_3",
      },
      {
        "condition": "!(processedCount > 1000)",
        "source": "gather_1",
        "target": "gather_1",
      },
      {
        "source": "gather_1",
        "target": "merge_3",
      },
    ],
    "id": "complexControlFlow",
    "nodes": [
      {
        "config": {
          "joinStrategy": "any",
        },
        "id": "merge_1",
        "uses": "merge",
      },
      {
        "config": {
          "joinStrategy": "any",
        },
        "id": "loop-controller_1",
        "params": {
          "condition": "currentBatch && currentBatch.length > 0",
        },
        "uses": "loop-controller",
      },
      {
        "config": {
          "joinStrategy": "any",
        },
        "id": "merge_2",
        "uses": "merge",
      },
      {
        "config": {
          "joinStrategy": "all",
        },
        "id": "gather_1",
        "uses": "gather",
      },
      {
        "config": {
          "joinStrategy": "any",
        },
        "id": "merge_3",
        "uses": "merge",
      },
    ],
  },
  "complexParallelFlow": {
    "edges": [
      {
        "condition": "validated.valid",
        "source": "gather_1",
        "target": "gather_1",
      },
      {
        "source": "gather_1",
        "target": "merge_1",
      },
      {
        "condition": "!(validated.valid)",
        "source": "gather_1",
        "target": "gather_1",
      },
      {
        "source": "gather_1",
        "target": "merge_1",
      },
    ],
    "id": "complexParallelFlow",
    "nodes": [
      {
        "config": {
          "joinStrategy": "all",
        },
        "id": "gather_1",
        "uses": "gather",
      },
      {
        "config": {
          "joinStrategy": "any",
        },
        "id": "merge_1",
        "uses": "merge",
      },
    ],
  },
  "mainFlow": {
    "edges": [
      {
        "source": "fetchUser_1",
        "target": "subFlow_1",
      },
      {
        "source": "subFlow_1",
        "target": "processOrders_1",
      },
    ],
    "id": "mainFlow",
    "nodes": [
      {
        "id": "fetchUser_1",
        "uses": "fetchUser",
      },
      {
        "id": "subFlow_1",
        "params": {
          "blueprintId": "subFlow",
        },
        "uses": "subflow",
      },
      {
        "id": "processOrders_1",
        "uses": "processOrders",
      },
    ],
  },
  "nestedControlFlow": {
    "edges": [
      {
        "source": "merge_2",
        "target": "merge_1",
      },
    ],
    "id": "nestedControlFlow",
    "nodes": [
      {
        "config": {
          "joinStrategy": "any",
        },
        "id": "merge_1",
        "uses": "merge",
      },
      {
        "config": {
          "joinStrategy": "any",
        },
        "id": "merge_2",
        "uses": "merge",
      },
    ],
  },
  "parallelFlow": {
    "edges": [],
    "id": "parallelFlow",
    "nodes": [
      {
        "config": {
          "joinStrategy": "all",
        },
        "id": "gather_1",
        "uses": "gather",
      },
    ],
  },
  "simpleFlow": {
    "edges": [
      {
        "source": "fetchUser_1",
        "target": "processOrders_1",
      },
    ],
    "id": "simpleFlow",
    "nodes": [
      {
        "id": "fetchUser_1",
        "uses": "fetchUser",
      },
      {
        "id": "processOrders_1",
        "uses": "processOrders",
      },
    ],
  },
  "subFlow": {
    "edges": [],
    "id": "subFlow",
    "nodes": [
      {
        "id": "recordTransaction_1",
        "uses": "recordTransaction",
      },
    ],
  },
}
`;

exports[`Compiler > should compile all test fixtures 2`] = `
{
  "fetchUser": {
    "exportName": "fetchUser",
    "importPath": "/home/g/m/flowcraft/packages/compiler/__tests__/fixtures/simple-flow.ts",
  },
  "processOrders": {
    "exportName": "processOrders",
    "importPath": "/home/g/m/flowcraft/packages/compiler/__tests__/fixtures/simple-flow.ts",
  },
  "recordTransaction": {
    "exportName": "recordTransaction",
    "importPath": "/home/g/m/flowcraft/packages/compiler/__tests__/fixtures/steps.ts",
  },
}
`;

exports[`Compiler > should compile all test fixtures 3`] = `
"// Generated by @flowcraft/compiler
import { recordTransaction } from '../__tests__/fixtures/steps'
import { fetchUser } from '../__tests__/fixtures/simple-flow'
import { processOrders } from '../__tests__/fixtures/simple-flow'

import type { NodeImplementation, WorkflowBlueprint } from 'flowcraft'

export const registry: Record<string, NodeImplementation> = {
  'recordTransaction': recordTransaction,
  'fetchUser': fetchUser,
  'processOrders': processOrders
}

export const blueprints: Record<string, WorkflowBlueprint> = {
  'complexControlFlow': {
  "id": "complexControlFlow",
  "nodes": [
    {
      "id": "merge_1",
      "uses": "merge",
      "config": {
        "joinStrategy": "any"
      }
    },
    {
      "id": "loop-controller_1",
      "uses": "loop-controller",
      "params": {
        "condition": "currentBatch && currentBatch.length > 0"
      },
      "config": {
        "joinStrategy": "any"
      }
    },
    {
      "id": "merge_2",
      "uses": "merge",
      "config": {
        "joinStrategy": "any"
      }
    },
    {
      "id": "gather_1",
      "uses": "gather",
      "config": {
        "joinStrategy": "all"
      }
    },
    {
      "id": "merge_3",
      "uses": "merge",
      "config": {
        "joinStrategy": "any"
      }
    }
  ],
  "edges": [
    {
      "source": "merge_1",
      "target": "loop-controller_1"
    },
    {
      "source": "loop-controller_1",
      "target": "merge_2"
    },
    {
      "source": "loop-controller_1",
      "target": "merge_2"
    },
    {
      "source": "loop-controller_1",
      "target": "loop-controller_1",
      "action": "continue"
    },
    {
      "source": "merge_2",
      "target": "loop-controller_1"
    },
    {
      "source": "gather_1",
      "target": "gather_1",
      "condition": "processedCount > 1000"
    },
    {
      "source": "gather_1",
      "target": "merge_3"
    },
    {
      "source": "gather_1",
      "target": "gather_1",
      "condition": "!(processedCount > 1000)"
    },
    {
      "source": "gather_1",
      "target": "merge_3"
    }
  ]
},
  'nestedControlFlow': {
  "id": "nestedControlFlow",
  "nodes": [
    {
      "id": "merge_1",
      "uses": "merge",
      "config": {
        "joinStrategy": "any"
      }
    },
    {
      "id": "merge_2",
      "uses": "merge",
      "config": {
        "joinStrategy": "any"
      }
    }
  ],
  "edges": [
    {
      "source": "merge_2",
      "target": "merge_1"
    }
  ]
},
  'subFlow': {
  "id": "subFlow",
  "nodes": [
    {
      "id": "recordTransaction_1",
      "uses": "recordTransaction"
    }
  ],
  "edges": []
},
  'mainFlow': {
  "id": "mainFlow",
  "nodes": [
    {
      "id": "fetchUser_1",
      "uses": "fetchUser"
    },
    {
      "id": "subFlow_1",
      "uses": "subflow",
      "params": {
        "blueprintId": "subFlow"
      }
    },
    {
      "id": "processOrders_1",
      "uses": "processOrders"
    }
  ],
  "edges": [
    {
      "source": "fetchUser_1",
      "target": "subFlow_1"
    },
    {
      "source": "subFlow_1",
      "target": "processOrders_1"
    }
  ]
},
  'simpleFlow': {
  "id": "simpleFlow",
  "nodes": [
    {
      "id": "fetchUser_1",
      "uses": "fetchUser"
    },
    {
      "id": "processOrders_1",
      "uses": "processOrders"
    }
  ],
  "edges": [
    {
      "source": "fetchUser_1",
      "target": "processOrders_1"
    }
  ]
},
  'parallelFlow': {
  "id": "parallelFlow",
  "nodes": [
    {
      "id": "gather_1",
      "uses": "gather",
      "config": {
        "joinStrategy": "all"
      }
    }
  ],
  "edges": []
},
  'complexParallelFlow': {
  "id": "complexParallelFlow",
  "nodes": [
    {
      "id": "gather_1",
      "uses": "gather",
      "config": {
        "joinStrategy": "all"
      }
    },
    {
      "id": "merge_1",
      "uses": "merge",
      "config": {
        "joinStrategy": "any"
      }
    }
  ],
  "edges": [
    {
      "source": "gather_1",
      "target": "gather_1",
      "condition": "validated.valid"
    },
    {
      "source": "gather_1",
      "target": "merge_1"
    },
    {
      "source": "gather_1",
      "target": "gather_1",
      "condition": "!(validated.valid)"
    },
    {
      "source": "gather_1",
      "target": "merge_1"
    }
  ]
}
}
"
`;
